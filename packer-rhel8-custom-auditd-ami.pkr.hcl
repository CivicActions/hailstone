packer {
  required_plugins {
    amazon = {
      source  = "github.com/hashicorp/amazon"
      version = "~> 1"
    }
  }
}

# Per https://developer.hashicorp.com/packer/integrations/hashicorp/amazon/latest/components/builder/ebs
# AWS currently doesn't accept any value other than "all", so we can ignore this to key_file_path
# the AMI private
#variable "ami_groups" {
#  type    = list(string)
#  default = "${env("AMI_GROUPS")}"
#}

variable "ami_regions" {
  type    = list(string)
  #default = "${env("AMI_REGIONS")}"
  default = ["us-east-1", "us-west-2"]
}

variable "aws_access_key" {
  type    = string
  default = "${env("AWS_ACCESS_KEY_ID")}"
}

variable "aws_secret_key" {
  type    = string
  default = "${env("AWS_SECRET_ACCESS_KEY")}"
}

variable "bucket_name" {
  type    = string
  default = "${env("BUCKET_NAME")}"
}

variable "iam_instance_profile" {
  type    = string
  default = "${env("IAM_INSTANCE_PROFILE")}"
}

variable "instance_type" {
  type    = string
  default = "${env("INSTANCE_TYPE")}"
}

variable "key_file_path" {
  type    = string
  default = "${env("KEY_FILE_PATH")}"
}

variable "keypair_name" {
  type    = string
  default = "${env("KEYPAIR_NAME")}"
}

variable "region" {
  type    = string
  default = "${env("REGION")}"
}

variable "ssh_username" {
  type    = string
  default = "${env("SSH_USERNAME")}"
}

variable "validation_tag" {
  type    = string
  default = "${env("validation_tag")}"
}

data "amazon-ami" "autogenerated_1" {
  access_key = "${var.aws_access_key}"
  filters = {
    name                = "RHEL-8.9.0_HVM-*x86_64*"
    root-device-type    = "ebs"
    virtualization-type = "hvm"
  }
  most_recent = true
  owners      = ["309956199498"]
  region      = "${var.region}"
  secret_key  = "${var.aws_secret_key}"
}
# The "legacy_isotime" function has been provided for backwards compatability, but we recommend switching to the timestamp and formatdate functions.

source "amazon-ebs" "autogenerated_1" {
  access_key                  = "${var.aws_access_key}"
  #ami_groups                  = "${var.ami_groups}"
  ami_name                    = "TEST-RHEL8-hardened-${legacy_isotime("2006-01-02-1504")}"
  ami_regions                 = "${var.ami_regions}"
  associate_public_ip_address = true
  ena_support                 = true
  encrypt_boot                = false
  iam_instance_profile        = "${var.iam_instance_profile}"
  instance_type               = "${var.instance_type}"
  region                      = "${var.region}"
  secret_key                  = "${var.aws_secret_key}"
  source_ami                  = "${data.amazon-ami.autogenerated_1.id}"
  ssh_pty                     = "true"
  ssh_username                = "${var.ssh_username}"
  tags = {
    SourceAMI        = "{{ .SourceAMI }}"
    validation_level = "${var.validation_tag}"
  }
}

build {
  sources = ["source.amazon-ebs.autogenerated_1"]

  provisioner "file" {
    destination = "/home/ec2-user/"
    source      = "./ssg-rhel8-ds-custom-auditd-tailoring.xml"
  }

  provisioner "file" {
    destination = "/home/ec2-user/"
    source      = "./custom_privileged.rules"
  }

  provisioner "shell" {
    expect_disconnect = "true"
    inline            = ["echo '****   Updating kernel   ****'", "sudo dnf -y update kernel kernel-tools*", "sudo sed -i 's/^#StopIdleSessionSec.*/StopIdleSessionSec=infinity/' /etc/systemd/logind.conf", "sudo systemctl reboot"]
  }

  provisioner "shell" {
    environment_vars = ["bucket=${var.bucket_name}", "ami_name=TEST-RHEL8-hardened-${legacy_isotime("2006-01-02-1504")}"]
    execute_command  = "{{ .Vars }} sudo -E -sS bash '{{ .Path }}'"
    pause_before     = "40s"
    script           = "setup-rhel8-custom-auditd.sh"
    valid_exit_codes = [0]
  }

  post-processor "manifest" {
    output     = "manifest.json"
    strip_path = true
  }
}
